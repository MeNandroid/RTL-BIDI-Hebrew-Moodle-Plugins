<?php// Poscast - lib.php, 24/02/2007/** * Fonctions relative � Moodle */// Ajouter une instancefunction podcast_add_instance($podcast) {    $podcast->timemodified = time();		return insert_record("podcast", $podcast);}// Mettre � jour une instancefunction podcast_update_instance($podcast) {    $podcast->timemodified = time();    $podcast->id = $podcast->instance;    return update_record("podcast", $podcast);}// Supprimer une instancefunction podcast_delete_instance($id) {	 global $CFG;    if (! $podcast = get_record("podcast", "id", "$id")) {        return false;    }    $result = true;    if (! delete_records("podcast", "id", "$podcast->id")) {		$result = false;    } else {		// Supprossion SQL		delete_records("podcast_structure", "id_podcast", "$podcast->id");		// Suppression physique		unlink($CFG->dirroot."/mod/podcast/publication/".$podcast->course."/rss".$podcast->id.".xml");		effacer($CFG->dirroot."/mod/podcast/media/".$podcast->course."/".$podcast->id);	}    return $result;}// Fonction inutilis�efunction podcast_user_outline($course, $user, $mod, $podcast) {	$return = NULL;    return $return;}// Fonction inutilis�efunction podcast_user_complete($course, $user, $mod, $podcast) {    return true;}// // Fonction inutilis�efunction podcast_print_recent_activity($course, $isteacher, $timestart) {    return false;}// Fonction execut�e par le cron Moodlefunction podcast_cron() {    global $CFG;	// Nettoyage des fichiers orphelins	if ($podcasts = get_records("podcast")) {		foreach($podcasts as $podcast) {			if(!$course = get_record("course","id",$podcast->course)) {				delete_records("podcast", "id", $ipodcast->id);				delete_records("podcast_structure", "id_podcast", $podcast->id);				effacer($CFG->dirroot."/mod/podcast/media/".$podcast->course);				effacer($CFG->dirroot."/mod/podcast/publication/".$podcast->course);			}		}	}    return true;}// Fonction inutiliseefunction podcast_grades($podcastid) {   return NULL;}// Fonction inutilisaefunction podcast_get_participants($podcastid) {    return false;}// Fonction inutilisaefunction podcast_scale_used ($podcastid,$scaleid) {    return false;}/******************************************************************************//** * Fonctions relative a l'activite Podcast */// Ajout d'un articlefunction podcast_add_item($podcast, $id) {	$browse = get_string('browse', 'podcast');   if (!$cm = get_record("course_modules", "id", $id)) {		error("Course Module ID was incorrect");	}    if (! $basedir = make_upload_directory("$podcast->course")) {        error("The site administrator needs to fix the file permissions");    }	$usehtmleditor = can_use_html_editor();?><form name="form" method="post" id="form" action="view.php">	<center>	<table cellpadding="5">	<tr>		<td align="left" valign="top"><b><?php print_string("title", "podcast") ?></b></td>		<td align="right"><input type="text" name="title" size="30" value="" /></td>	</tr>	<tr>	  <td align="left" valign="top"><b><?php print_string('desc', 'podcast') ?> :</b></td>	  <td align="right">		<?php print_textarea($usehtmleditor, 15, 40, 400, 300, "intro",""); ?></td>	</tr>	<tr>	  <td align="left" valign="top"><b><?php print_string('file', 'podcast') ?> :</b></td>	  <td align="right">		<?php        echo "<input type=\"text\" name=\"lien\" size=\"30\" value=\"\" alt=\"lien\" />";        button_to_popup_window ("/mod/podcast/files/index.php?id=$podcast->course&amp;pod=$podcast->id&amp;choose=form".$item->id.".lien", "coursefiles", $browse, 500, 790, $browse);		?>	  </td>	</tr>	</table>	<input type="hidden" name="id"          value="<?php p($id) ?>" />	<input type="hidden" name="id_item"     value="" />	<input type="hidden" name="id_podcast"  value="<?php p($podcast->id) ?>" />	<input type="hidden" name="tab"         value="view" />	<input type="hidden" name="action"      value="create" />	<input type="hidden" name="pubdate"     value="<?php echo podcast_date_format(); ?>" />	<input type="hidden" name="date_html"      value="<?php echo podcast_date_format_html($podcast->lang); ?>" />	<input type="hidden" name="duration"    value="00:00:00" />	<input type="hidden" name="length"      value="000000" />	<input type="submit" value="<?php print_string('add_item', "podcast") ?>" /></center></form><?php}// Editer un articlefunction podcast_edit_item($podcast, $id) {	global $CFG;	global $USER;   if (!$cm = get_record("course_modules", "id", $id)) {		error("Course Module ID was incorrect");	}	get_item_podcast($podcast,$id);}// Afficher la liste des articles e editerfunction get_item_podcast($podcast,$id) {	global $CFG;	$browse = get_string('browse', 'podcast');	$usehtmleditor = can_use_html_editor();	if ($items = get_records("podcast_structure", "id_podcast", $podcast->id)) {		foreach($items as $item) { ?>			<form name="form<?php echo $item->id;?>" method="post" action="view.php">			<center>			<table cellpadding="5">			<tr>				<td align="right" valign="top"><b><?php print_string("title", "podcast") ?></b></td>				<td align="left"><input type="text" name="title" size="30" value="<?php p(stripslashes($item->title)) ?>" />				<a href="?id=<?php echo $id; ?>&amp;tab=edit&amp;action=delete&amp;id_item=<?php echo $item->id; ?>" style="color:red;font-size:0.8em;font-weight:bold;">					<?php print_string('delete', "podcast") ?>				</a></td>			</tr>			<tr>			  <td align="right" valign="top"><b><?php print_string('desc', 'podcast') ?> :</b></td>			  <td align="left">				<?php print_textarea($usehtmleditor, 7, 50, 450, 200, "intro", stripslashes($item->intro)); ?></td>			</tr>			<tr>			  <td align="right" valign="top"><b><?php print_string('file', 'podcast') ?> :</b></td>			  <td align="left">				<?php				$itemlink = $item->lien;				echo "<input type=\"text\" name=\"lien\" size=\"30\" value=\"$itemlink\" alt=\"lien\" />";				button_to_popup_window ("/mod/podcast/files/index.php?id=$podcast->course&amp;pod=$podcast->id&amp;choose=form".$item->id.".lien", "coursefiles", $browse, 500, 790, $browse);			?>			</td>			</tr>			</table>			<input type="hidden" name="id"          value="<?php p($id) ?>" />			<input type="hidden" name="id_item"          value="<?php p($item->id) ?>" />			<input type="hidden" name="id_podcast"  value="<?php p($item->id_podcast) ?>" />			<input type="hidden" name="tab"         value="edit" />			<input type="hidden" name="action"         value="update" />			<input type="hidden" name="pubdate"      value="<?php echo podcast_date_format(); ?>" />			<input type="hidden" name="date_html"      value="<?php echo podcast_date_format_html($podcast->lang); ?>" />			<input type="hidden" name="duration"      value="<?php p($item->duration) ?>" />			<input type="hidden" name="length"      value="<?php p($item->length) ?>" />			<input type="submit" value="<?php print_string('save', "podcast") ?>" />			</center>			</form>			<hr /> <?php		}	}}// Create an XML outputfunction make_xml($base, $structure)	{	global $CFG;	require_once($CFG->libdir.'/filelib.php');	unset($r);	$r = '<?xml version="1.0" encoding="UTF-8"?>	<rss xmlns:itunes="http://www.itunes.com/DTDs/Podcast-1.0.dtd" version="2.0">	<channel>	<lastBuildDate>'.podcast_date_format().' '.date('O').'</lastBuildDate>	<title>'.utf8_encode(stripslashes($base->name)).'</title>	<itunes:author>'.utf8_encode(stripslashes($base->author)).'</itunes:author>	<link>'.$base->image_url.'</link>	<description>'.utf8_encode(stripslashes($base->intro)).'</description>	<itunes:summary>'.utf8_encode(stripslashes($base->intro)).'</itunes:summary>	<image>		<url>'.$base->image_img.'</url>		<title>'.utf8_encode(stripslashes($base->name)).'</title>		<link>'.$base->image_url.'</link>	</image>	<language>'.$base->lang.'</language>	<category>'.utf8_encode($base->category).'</category>	<itunes:category text="'.utf8_encode(stripslashes($base->category)).'"></itunes:category>	<copyright>'.utf8_encode(stripslashes($base->copyright)).'</copyright>	<itunes:owner>		<itunes:name>'.utf8_encode(stripslashes($base->owner)).'</itunes:name>		<itunes:email>'.$base->owner_email.'</itunes:email>	</itunes:owner>	<itunes:image href="'.$base->image_url.'" />	<itunes:explicit>clean</itunes:explicit>';	foreach($structure as $item) {		$r = $r.'<item>		<title>'.utf8_encode(stripslashes($item->title)).'</title>		<itunes:author>'.utf8_encode(stripslashes($base->author)).'</itunes:author>		<link>'.$CFG->wwwroot."/mod/podcast/media/".$base->course."/".$base->id."/".$item->lien.'</link>		<description>'.utf8_encode(stripslashes($item->intro)).'</description>		<guid>'.$CFG->wwwroot."/mod/podcast/media/".$base->course."/".$base->id."/".$item->lien.'</guid>		<pubDate>'.$item->pubdate.'</pubDate>		<enclosure url="'.$CFG->wwwroot."/mod/podcast/media/".$base->course."/".$base->id."/".$item->lien.'" length="'.$item->length.'" type="'.mimeinfo("type",$item->lien).'" />		<itunes:duration>'.$item->duration.'</itunes:duration>		<itunes:subtitle />		<itunes:summary>'.utf8_encode(stripslashes($item->intro)).'</itunes:summary>		</item>';	}	$r = $r.'</channel>	</rss>';	return ($r);	}// Afficher un fichier multim�dia selon le type MIMEfunction get_media_html($url) {    global $CFG, $THEME;	require_once('../../lib/filelib.php');	// Type Audio : Lecteur Flash de Moodle	if(mimeinfo("type",$url) == "audio/mpeg" || mimeinfo("type",$url) == "audio/mp3") {			static $c;			if (empty($c)) {				if (!empty($THEME->filter_mediaplugin_colors)) {					$c = $THEME->filter_mediaplugin_colors;   // You can set this up in your theme/xxx/config.php				} else {					$c = 'bgColour=000000&btnColour=ffffff&btnBorderColour=cccccc&iconColour=000000&iconOverColour=00cc00&trackColour=cccccc&handleColour=ffffff&loaderColour=ffffff&waitForPlay=yes&';				}			}			$c = htmlentities($c);			$html  = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' . "\n";			$html .= ' codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0" ' . "\n";			$html .= ' width="290" height="24" id="mp3player">' . "\n";			$html .= " <param name=\"movie\" value=\"$CFG->wwwroot/filter/mediaplugin/mp3player.swf?soundFile=$url\" />" . "\n";			$html .= ' <param name="quality" value="high" />' . "\n";			$html .= ' <param name="bgcolor" value="#333333" />' . "\n";			$html .= ' <param name="flashvars" value="'.$c.'" />' . "\n";			$html .= " <embed src=\"$CFG->wwwroot/filter/mediaplugin/mp3player.swf?soundFile=$url\" " . "\n";			$html .= "  quality=\"high\" bgcolor=\"#333333\" width=\"290\" height=\"24\" name=\"mp3player\" " . "\n";			$html .= ' type="application/x-shockwave-flash" ' . "\n";			$html .= ' flashvars="'.$c.'" ' . "\n";			$html .= ' pluginspage="http://www.macromedia.com/go/getflashplayer">' . "\n";			$html .= '</embed>' . "\n";			$html .= '</object>&nbsp;' . "\n";	// Type video : codec quicktime	} else if(mimeinfo("type",$url) == "video/quicktime" || mimeinfo("type",$url) == "video/mp4" || mimeinfo("type",$url) == "video/m4v") {			$html  = '<object classid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B" codebase="http://www.apple.com/qtactivex/qtplugin.cab" width="'.$CFG->podcast_width.'" 		height="'.$CFG->podcast_height.'" style="height: '.$CFG->podcast_height.'; width: '.$CFG->podcast_width.';">' . "\n";			$html .= '<param name="soundFile" value="'.$url.'"/>' . "\n";			$html .= '<param name="autoplay" value="false"/>' . "\n";			$html .= '<param name="controller" value="true"/>' . "\n";			$html .= '<!--[if !IE]> <-->' . "\n";			$html .= '<object data="'.$url.'" type="video/quicktime" width="'.$CFG->podcast_width.'" height="'.$CFG->podcast_height.'">' . "\n";			$html .= '<param name="autoplay" value="false"/>' . "\n";			$html .= '<param name="controller" value="true"/>' . "\n";			$html .= '</object>';			$html .= '<!--> <![endif]-->';			$html .= '</object>';	// Type video : Selon navigateur	} else if(mimeinfo("type",$url) == "video/mpeg" || mimeinfo("type",$url) == "video/mpg") {			$html  = '<object data="'.$url.'" type="'.mimeinfo("type",$url).'" width="'.$CFG->podcast_width.'" height="'.$CFG->podcast_height.'">' . "\n";		  	$html .= '<param name="src" value="'.$url.'">' . "\n";			$html .= '<param name="autoplay" value="false">' . "\n";  			$html .= '<param name="autoStart" value="0">' . "\n";			$html .= '</object>' . "\n";	// Type video : Codec Microsoft	} else if(mimeinfo("type",$url) == "video/x-ms-wmv" || mimeinfo("type",$url) == "video/x-ms-asf" || mimeinfo("type",$url) == "video/x-ms-wm") {  			$html  = '<object type="'.mimeinfo("type",$url).'" data="'.$url.'" width="'.$CFG->podcast_width.'" height="'.$CFG->podcast_height.'">' . "\n";    		$html  .= '<param name="src" value="'.$url.'">' . "\n";    		$html  .= '<param name="autoStart" value="0">' . "\n";  			$html  .= '</object>' . "\n";	} else if(mimeinfo("type",$url) == "application/ogg" || mimeinfo("type",$url) == "document/unknown" ) {			$html  = '<applet code="com.fluendo.player.Cortado.class"';			$html  .= '        archive="'.$CFG->wwwroot.'/mod/podcast/cortado.jar"';			$html  .= '        width="320" height="80">';			$html  .= '   <param name="url" value="'.$url.'"/>';			$html  .= '   <param name="duration" value="10"/>';			$html  .= '   <param name="local" value="false"/>';			$html  .= '   <param name="keepAspect" value="true"/>';			$html  .= '   <param name="video" value="true"/>';			$html  .= '   <param name="seekable" value="true"/>';			$html  .= '   <param name="audio" value="true"/>';			$html  .= '   <param name="bufferSize" value="200"/>';			$html  .= '</applet>';	}	return $html;}// R�cuperer une date au format XML 2.0function podcast_date_format() {	return date('D, d M Y H:i:s O');}// R�cup�rer une date pour l'affichage htmlfunction podcast_date_format_html($lang) {	$jour =  date('D');	$mois =  date('M');	switch($jour) {		case 'Mon': $jour = 'Lundi'; break;		case 'Tue': $jour = 'Mardi'; break;		case 'Wed': $jour = 'Mercredi'; break;		case 'Thu': $jour = 'Jeudi'; break;		case 'Fri': $jour = 'Vendredi'; break;		case 'Sat': $jour = 'Samedi'; break;		case 'Sun': $jour = 'Dimanche'; break;		default: $jour =''; break;	}	switch($mois) {		case 'Jan': $mois = 'Janvier'; break;		case 'Feb': $mois = utf8_encode('F�vrier'); break;		case 'Mar': $mois = 'Mars'; break;		case 'Apr': $mois = 'Avril'; break;		case 'May': $mois = 'Mai'; break;		case 'Jun': $mois = 'Juin'; break;		case 'Jul': $mois = 'Juillet'; break;		case 'Aug': $mois = utf8_encode('Ao�t'); break;		case 'Sep': $mois = 'Septembre'; break;		case 'Oct': $mois = 'Octobre'; break;		case 'Nov': $mois = 'Novembre'; break;		case 'Dec': $mois = 'Decembre'; break;		default: $mois =''; break;	}	// Date fran�aise	if (strtolower($lang) == "fr")		return $jour.' '.date('d')." ".$mois." ".date('Y').' &agrave; '.date('H:i:s');	else		return date('D, d M Y H:i:s');}// Afficher le Podcast au format hml dans Moodlefunction get_podcast($podcast) {	global $CFG;	// Podcast Reader	echo '<div align="center" style="font-size:12px;">';		// Title		echo "<h2 align='center'><img src='icon.gif' alt='Podcast' /> ".stripslashes($podcast->name)."</h2>";		// General		echo "<div style='width:270px;float:left;'>";		echo "<p style='text-align:center;' ><a href='$podcast->image_url'><img src='$podcast->image_img' alt='".stripslashes($podcast->name)."' /></a></p>";		// Description		echo "<p style='text-align:justify;'>".stripslashes($podcast->intro)."</p>";	if (file_exists($CFG->dirroot."/mod/podcast/publication/".$podcast->course."/rss".$podcast->id.".xml")) {		// RSS Icon		echo '<div style="border-top: 1px solid black;border-bottom: 1px solid black;">';		echo '<p style="font-weight:bold; font-variant:small-caps;">';		echo get_string("subscribe", "podcast");		echo '</p>';		echo '<p><a href="'.$CFG->wwwroot.'/mod/podcast/publication/'.$podcast->course.'/rss'.$podcast->id.'.xml">';		echo '<img src="'.$CFG->wwwroot.'/mod/podcast/icon_rss/rss.jpg" alt="RSS" /></a></p>';		// Itune		echo '<p><a href="'.str_replace("http://","itpc://",$CFG->wwwroot).'/mod/podcast/publication/'.$podcast->course.'/rss'.$podcast->id.'.xml">';		echo '<img src="'.$CFG->wwwroot.'/mod/podcast/icon_rss/rss-itunes.jpg" alt="Itunes RSS" /></a><br />';		// Google		echo '<a href="http://www.google.com/reader/preview/*/feed/'.$CFG->wwwroot.'/mod/podcast/publication/'.$podcast->course.'/rss'.$podcast->id.'.xml">';		echo '<img src="'.$CFG->wwwroot.'/mod/podcast/icon_rss/rss-google.jpg" alt="Google Reader" /></a><br />';		// Google		echo '<a href="http://add.my.yahoo.com/rss?url='.$CFG->wwwroot.'/mod/podcast/publication/'.$podcast->course.'/rss'.$podcast->id.'.xml">';		echo '<img src="'.$CFG->wwwroot.'/mod/podcast/icon_rss/rss-yahoo.jpg" alt="My Yahoo" /></a><br />';		// Netvibes		echo '<a href="http://www.netvibes.com/addApiModule.php?url='.$CFG->wwwroot.'/mod/podcast/publication/'.$podcast->course.'/rss'.$podcast->id.'.xml">';		echo '<img src="'.$CFG->wwwroot.'/mod/podcast/icon_rss/rss-netvibes.jpg" alt="Netvibes" /></a></p>';		echo '</div>';	}		// Informations		echo "<p style='text-align:left;font-size:0.8em;'>Categorie : ".stripslashes($podcast->category)."<br />";		echo get_string('createdby', "podcast")." ".stripslashes($podcast->author)." (".$podcast->owner_email.")</p>";	echo "</div>";	// Items	echo "<div style='margin-left:300px;margin-top:50px;text-align:left;'>";	if ($podcast_item = get_records("podcast_structure", "id_podcast", $podcast->id)) {		foreach($podcast_item as $item) {			echo "<div style='border-bottom: 1px dashed black;'>";			echo "<h2>".stripslashes($item->title)." <span style='font-size:0.9em;font-style:italic;font-weight:normal;margin-left:40px;'>";			echo $item->date_html."</span></h2>";			echo "<p>".stripslashes($item->intro)."</p>";			echo "<p>".get_media_html($CFG->wwwroot."/mod/podcast/media/".$podcast->course."/".$podcast->id."/".$item->lien)."</p>";			echo "</div>";		}	} else {		echo '<h3 style="font-style:italic;">'.get_string("no_item", "podcast").'</h2>';	}	echo "</div>";	echo "<div style='clear:both;'></div>";	echo "</div>";}// Format de fichier multimedia accepter par d�faultfunction get_podcast_mimetypes() {    return array ('avi','ogg','mov','movie','m3u','mp3','mp4','m4v','mpeg','mpe','mpg','m4a','qt','wmv','asf');}// R�cuperer l'extension d'un fichierfunction get_extension($file) {    if (eregi('\.([a-z0-9]+)$', $file, $match)) {    	return strtolower($match[1]);    } else {        return 'xxx';    }}// R�cuperer la liste des formats de fichier configurer par l'utilisateurfunction get_podcast_limit_mimetypes($default=true) {	global $CFG;	$types = explode(",",$CFG->podcast_extensions);	$new_ext = array();	$good_ext = get_podcast_mimetypes();	foreach($types as $type) {		$type = trim($type);		if (in_array($type,$good_ext))			array_push($new_ext,$type);	}	if ($default && count($new_ext) == 0)		$new_ext = $good_ext;	return $new_ext;}// Sauvegarder le fichier XMLfunction podcast_save_file ($file, $content) {    $status = true;        $rss_file = fopen($file, "w");        if ($rss_file) {            $status = fwrite ($rss_file, $content);            fclose($rss_file);        } else {            $status = false;        }    return $status;}// Cr�er le fichier XML 2.0function make_xml_podcast($podcast) {	global $CFG;	$podcast_item = get_records("podcast_structure", "id_podcast", $podcast->id);	$path = $CFG->dirroot."/mod/podcast/publication/".$podcast->course."/";	if (!is_dir($path))		mkdir($path);	$file = $path."rss".$podcast->id.".xml";	return podcast_save_file($file,make_xml($podcast, $podcast_item));}// V�fication du format d'un fichierfunction check_podcast_extension($file) {	if (in_array(get_extension($file),get_podcast_limit_mimetypes()))		return true;	else		return false;}// Effacer un compl�tement dossierfunction effacer($path) {    $O = dir($path);    if(!is_object($O))    return false;    while($file = $O -> read()) {        if($file != '.' && $file != '..') {            if(is_file($path.'/'.$file))            unlink($path.'/'.$file);            else if(is_dir($path.'/'.$file))            	effacer($path.'/'.$file);            }        }    $O -> close();    $O -> close();    rmdir($path);    return true;}?>